#include <iostream>
using namespace std;
const int maxn = 10005;
int father[maxn]={0},cnt[maxn]={0};
bool exist[maxn]={false};
int n,k,q;
int findFather(int x){
	int a = x;
	while(x!=father[x]){
		x = father[x];
	}
	while(a != father[a]){
		int z=a;
		a = father[a];
		father[z]=x;
	}
	return x;
}
void Union(int a,int b){
	int faA = findFather(a);
	int faB = findFather(b);
	if(faA != faB){
		father[faA] = faB;
	}
}
int main() {
	cin >> n;
	for(int i=1;i<maxn;i++){
		father[i] = i;
	}
	int bird,temp;
	for(int i=0;i<n;i++){
		cin >> k >> bird;
		exist[bird] = true;
		for(int j=0;j<k-1;j++){
			cin >> temp;
			Union(bird,temp);
			exist[temp] = true;	
		}
	}
	for(int i=1;i<maxn;i++){
		if(exist[i]){
			cnt[findFather(i)]++;
		}
		
	}
	int numTree = 0,numBirds = 0;
	for(int i=1;i<maxn;i++){
		if(exist[i]==true && cnt[i] !=0){
			numTree++;
			numBirds += cnt[i];
		}
	}
	printf("%d %d\n",numTree,numBirds);
	cin >> q;
	int b1,b2;
	for(int i=0;i<q;i++){
		cin>>b1>>b2;
		if(findFather(b1) == findFather(b2)){
			cout  << "Yes" <<endl;
		}else
			cout  << "No" <<endl;
	}
	return 0;
}
