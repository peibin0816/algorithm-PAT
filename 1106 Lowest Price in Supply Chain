#include <iostream>
#include <queue>
#include <vector>
#include <cmath>
using namespace std;
const int maxn = 100010;
double n,p,r,minlayer = maxn;
int count = 0; 
struct tree{
	vector<int> child;
	int layer;
}node[maxn];

void BFS(int root){
	queue<int> q;
	q.push(root);
	while(!q.empty()){
		int front = q.front();
		if(node[front].child.size() == 0){
			if(node[front].layer < minlayer){
				minlayer = node[front].layer;
				count = 1;
			}
			else if(node[front].layer == minlayer){
				count++;
			}
		}
		q.pop();
		for(int i=0;i<node[front].child.size();i++){
			int chirld = node[front].child[i];
			node[chirld].layer = node[front].layer+1;
			q.push(chirld);
		}		
	}
}
int main() {
	cin>>n>>p>>r;
	r/=100;
	int k,child;
	for(int i=0;i<n;i++){
		cin>>k;
		for(int j=0;j<k;j++){
			cin >> child;
			node[i].child.push_back(child);
		}	
	}
	node[0].layer = 0; 
	BFS(0);
	printf("%.4f %d\n",p*pow(1+r,minlayer),count);
	return 0;
}
