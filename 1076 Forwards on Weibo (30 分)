#include <iostream>
#include <set>
#include <queue>
using namespace std;
const int maxn = 1005; 
struct node{
	int v;
	int layer;
}Node[maxn];
int n,l;
set<int> adj[maxn];
bool inq[maxn] ={false};
void BFS(int v,int &forwardNum){
	queue<int> q;
	Node[v].layer = 0;
	q.push(v);
	inq[v] = true;
	while(!q.empty()){
		int top = q.front();
		q.pop();
		//cout << top <<"*"<<Node[top].layer<<endl;
		if(Node[top].layer > l) return;	
		forwardNum++;	
		for(set<int>::iterator it = adj[top].begin();it!=adj[top].end();it++){
			int follow = *it;
			if(Node[follow].layer > (Node[top].layer+1)) 
				Node[follow].layer = Node[top].layer+1;
			if(inq[follow]==false){
				q.push(follow);
				inq[follow]=true;
			}			
		}		
	}
}
int main(){
	int m,k,id,user;
	cin >> n >> l;
	for(int i=1;i<=n;i++){
		Node[i].v = i;
		cin >> m;
		for(int j=0;j<m;j++){
			cin >> user;
			Node[user].v = user;
			adj[user].insert(i);
		}	
	}
	cin >> k;
	for(int i=0;i<k;i++){
		for(int j=0;j<=n;j++) {
			inq[j] = false;
			Node[j].layer = maxn;
		}
		int forwardNum = 0;
		cin >> id;
		BFS(id,forwardNum);
		cout << forwardNum-1 <<endl;
	} 	
	return 0;
}
