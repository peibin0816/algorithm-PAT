#include <iostream>
#include <queue>
#include <vector>
#include <cmath>
using namespace std;
const int maxn = 110;
struct tree{
	vector<int> child;
	int layer;
}node[maxn];
int n,m;
int layerSum[maxn] = {0},layer = 1;
void BFS(int root){
	queue<int> q;
	q.push(root);
	while(!q.empty()){
		int front = q.front();
		layer = node[front].layer;
		if(node[front].child.size() == 0){
			layerSum[layer]++;
		}
		q.pop();
		for(int i=0;i<node[front].child.size();i++){
			int chirld = node[front].child[i];
			node[chirld].layer = node[front].layer+1;
			q.push(chirld);
		}		
	}
}
int main() {
	cin>>n>>m;
	int id,k,child;
	for(int i=0;i<m;i++){
		cin>>id>>k;
		for(int j=0;j<k;j++){
			cin >> child;
			node[id].child.push_back(child);
		}	
	} 
	node[1].layer = 1; 
	BFS(1);
	for(int i=1;i<=layer;i++){
		if(i!=1) cout << " ";
		cout << layerSum[i];		
	}
	return 0;
}
