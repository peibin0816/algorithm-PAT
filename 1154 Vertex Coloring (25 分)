#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;
const int maxn = 10005;
vector<int> adj[maxn];
int n,m,k,v1,v2;
int main() {
	cin>>n>>m;
	for(int i=0;i<m;i++){
		cin>>v1>>v2;
		adj[v1].push_back(v2);
		adj[v2].push_back(v1);
	}
	cin >> k;
	for(int i=0;i<k;i++){
		vector<int> color(n);
		unordered_set<int> inq;
		bool flag = true;
		for(int j=0;j<n;j++) {
			cin >> color[j];
			inq.insert(color[j]);
		}        
		for(int j=0;j<n;j++){
			for(int v=0;v<adj[j].size();v++){
				if(color[j] == color[adj[j][v]]) flag = false;				
			}
		}
		if(!flag) cout<<"No"<<endl;
		else cout<<inq.size()<<"-coloring"<<endl;
	}
	return 0;
}


#include <iostream>
#include <vector>
#include <set>
using namespace std;

struct edge{
	int st,ed;	
}eds[10002]; 
int n,m,k;
int val[10002]={0};

int check(){
	for(int i=0;i<m;i++){
		if(val[eds[i].st] == val[eds[i].ed]) return -1;
	}
	return 0; 
}
int main(){	
	cin>>n>>m;
	for(int i=0;i<m;i++){
		cin>>eds[i].st>>eds[i].ed;
	}
	cin>>k;
	for(int i=0;i<k;i++){
		set<int> ans;
		for(int j=0;j<n;j++){
			cin>>val[j];
			ans.insert(val[j]);
			/*如果用hash这里会段错误
			if(hashC[val[j]]!=0){
				ans++;
				//hashC[val[j]]=1;
			}
			*/
		}
		if(check() == -1) cout<<"No"<<endl;
		else cout<<ans.size()<<"-coloring"<<endl;
	}
	return 0;
}
