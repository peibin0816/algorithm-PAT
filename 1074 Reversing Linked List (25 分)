#include <iostream>
#include <algorithm>
using namespace std;
const int maxn = 100010;
struct Node{
	int add,data,next;
	int order;
}node[maxn];
bool cmp(Node a,Node b){
	return a.order < b.order;
}
int main() {
	for(int i=0;i<maxn;i++){
		node[i].order = maxn;
	}
	int begin,n,k,address;
	cin >> begin >> n >> k;
	for(int i=0;i<n;i++){
		cin >> address;
		cin >> node[address].data >> node[address].next;
		node[address].add = address;
	} 
	int p = begin,count = 0;
	while(p!=-1){
		node[p].order = count++;
		p = node[p].next; 
	}
	sort(node,node+maxn,cmp);
	n = count;
	for(int i=0;i<n/k;i++){
		for(int j = (i+1)*k-1;j>i*k;j--){
			printf("%05d %d %05d\n",node[j].add,node[j].data,node[j-1].add);
		}
		printf("%05d %d ",node[i*k].add,node[i*k].data);
		if(i<n/k -1){
			printf("%05d\n",node[(i+2)*k-1].add);
		}
		else{
			if(n%k==0){
				printf("-1\n");
			}else{
				printf("%05d\n",node[(i+1)*k].add);
				for(int i=n/k*k;i<n;i++){
					printf("%05d %d ",node[i].add,node[i].data);
					if(i<n-1){
						printf("%05d\n",node[i+1].add);
					}
					else{
						printf("-1\n");
					}
				} 
			}
		}
	}	
	return 0;
}







#include <iostream>
using namespace std;
int main() {
 int first, k, n, sum = 0;
 cin >> first >> n >> k;
 int temp, data[100005], next[100005], list[100005], result[100005];
 for (int i = 0; i < n; i++) {
 cin >> temp;
 cin >> data[temp] >> next[temp];
 }
 while (first != -1) {
 list[sum++] = first;
 first = next[first];
 }
 for (int i = 0; i < sum; i++) result[i] = list[i];
 for (int i = 0; i < (sum - sum % k); i++)
 result[i] = list[i / k * k + k - 1 - i % k];
 for (int i = 0; i < sum - 1; i++)
 printf("%05d %d %05d\n", result[i], data[result[i]], result[i + 1]);
 printf("%05d %d -1", result[sum - 1], data[result[sum - 1]]);
 return 0;
}
